/**
 * Define styles for a set of per-color sub-classes of an element.
 *
 * The mixin content block will be applied to a set of classes determined by
 * the $prefix and $sets arguments, and in the content block, the variable
 * $color is assigned to the hex value for the color for each class.
 *
 * @param string $prefix Each generated class will be prefixed with this
 *                       string, followed by a hyphen.
 * @param list   $sets   Each member of this list should be a string that
 *                       corresponds to a key in the global $color-sets map
 *                       (see _variables.scss).
 *
 * Boring example:
 *
 * .thing {
 *   @include colorize( pfx, rainbow social ) {
 *     color: $color;
 *   }
 * }
 *
 * ...becomes:
 *
 * // from the 'rainbow' set:
 * .thing.pfx-gold { color: #ff8b18; }
 * .thing.pfx-teal { color: #3bdf9a; }
 * .thing.pfx-lime { color: #aacc00; }
 * // ...etc., and from the 'social' set:
 * .thing.pfx-facebook { color: #3b5998; }
 * .thing.pfx-twitter { color: #4099ff; }
 */

// Initialize the global $color variable, which this mixin will use as it
// iterates. $color needs to be global in order for the mixin content block to
// be able to access it.
$color: null !global;

@mixin colorize( $prefix: color, $sets: $color-set-default ) {

	// Save current value of the $color global, just in case there is one.
	$global-color: $color;

	// Initialize a map where we'll temporarily store the desired color sets.
	$merged-sets: ();

	// Merge all the desired color sets into $merged-sets.
	@each $set-name in $sets {
		$merged-sets: map-merge( $merged-sets, map-get( $color-sets, $set-name ) );
	}

	// Iterate over each color in $merged-sets.
	@each $theme-name, $color-value in $merged-sets {

		$color: $color-value !global;

		// Apply the styles in the mixin content block for this color class.
		&.#{$prefix}-#{$theme-name} {
			@content;
		}
	}

	// Restore previous value of $color.
	$color: $global-color !global;
}

/**
 * Define padding + bottom margins for a hero element involving a floated image that should overlap with the bottom edge of the container.
 */
@mixin hero-float-margins( $overlap-bottom, $margin-bottom: rem(30), $breakpoint: $desktop ) { // $padding: rem(60) ) {

	@include breakpoint( $breakpoint ) {
		padding: rem(60) 0;
		margin: 0 0 $overlap-bottom + $margin-bottom;

		.hero-image {
			margin-bottom: - ( $overlap-bottom + rem(60) );
		}
	}
}

/**
 * Use an inline SVG image as a background.
 */
@mixin svg-bg( $name ) {
	@extend .icon-#{$name};
	background-repeat: no-repeat;
	background-position: center top;
	width: auto;
	height: auto;
}

/**
 * Add a pretty-ish, shadow-based underline to links.
 *
 * :hover styles will only be added if a third argument is provided.
 */
@mixin underline-shadow( $color-main, $color-background, $color-hover: none ) {
	color: $color-main;
	box-shadow: inset 0 -3px $color-background, inset 0 -4px rgba( $color-main, 0.6 );
	text-shadow: 0 1px $color-background, 1px 0 $color-background, -1px 0 $color-background;

	@if none != $color-hover {

		&:hover {
			color: $color-hover;
			box-shadow: inset 0 -3px $color-background, inset 0 -4px rgba( $color-hover, 0.6 );
		}
	}
}

// Add margins and/or padding to the current element and certain child elements (specified by
// $child-selector) such that all matched child elements are spaced $gutters distance apart, and the
// effective outer margins of the current element are $margins.
//
// $child-selector  - A selector string to specify child elements.
// $margins         - A space-sparated list, like you'd use in a 'margin' or 'padding' declaration,
//                    specifying the desired outer margins of the current element.
// $gutters         - Another space-separated list specifying the desired 'gutters' between child
//                    elements.
// $at-root         - By default, the CSS rules for the child elements are added under the current
//                    selector. Set this string to 'at-root' to add them at the root level instead.
@mixin flex-gutter( $child-selector, $margins, $gutters, $at-root: 'nested' ) {

	// Parse margin lists into maps.
	$margin-map: get-margin-map( $margins );
	$gutter-map: get-margin-map( $gutters );

	$gutter-top: ( map-get( $gutter-map, 'top' ) / 2 );
	$gutter-right: ( map-get( $gutter-map, 'right' ) / 2 );
	$gutter-bottom: ( map-get( $gutter-map, 'bottom' ) / 2 );
	$gutter-left: ( map-get( $gutter-map, 'left' ) / 2 );

	// Set margins on this element.
	margin: {
		top: map-get( $margin-map, 'top' ) - $gutter-top;
		right: map-get( $margin-map, 'right' ) - $gutter-right;
		bottom: map-get( $margin-map, 'bottom' ) - $gutter-bottom;
		left: map-get( $margin-map, 'left' ) - $gutter-left;
	}

	@if ( 'at-root' == $at-root ) {
		@at-root #{$child-selector} {
			margin: $gutter-top $gutter-right $gutter-bottom $gutter-left;
		}
	} @else {
		#{$child-selector} {
			margin: $gutter-top $gutter-right $gutter-bottom $gutter-left;
		}
	}
}

// Utility function for parsing a margin list of unknown length (e.g.: `1rem 0 2rem`, or `2rem 0`,
// etc). into a map with top, right, bottom, and left keys.
@function get-margin-map( $margins ) {

	// Initialize local map variable.
	$margin-map: (
		top: 0,
		right: 0,
		bottom: 0,
		left: 0,
	);

	@if ( 4 == length( $margins ) ) {
		$margin-map: (
			top:    nth( $margins, 1 ),
			right:  nth( $margins, 2 ),
			bottom: nth( $margins, 3 ),
			left:   nth( $margins, 4 ),
		);
	} @elseif ( 3 == length( $margins ) ) {
		$margin-map: (
			top:    nth( $margins, 1 ),
			right:  nth( $margins, 2 ),
			bottom: nth( $margins, 3 ),
			left:   nth( $margins, 2 ),
		);
	} @elseif ( 2 == length( $margins ) ) {
		$margin-map: (
			top:    nth( $margins, 1 ),
			right:  nth( $margins, 2 ),
			bottom: nth( $margins, 1 ),
			left:   nth( $margins, 2 ),
		);
	} @elseif ( 1 == length( $margins ) ) {
		$margin-map: (
			top:    $margins,
			right:  $margins,
			bottom: $margins,
			left:   $margins,
		);
	} @else {
		@error 'get-margin-map(): $margins must be a list with 1-4 items.';
	}

	@return $margin-map;
}
